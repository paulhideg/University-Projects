     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0500                        a dw 5h
    15 00000002 0200                        b dw 2h
    16 00000004 0100                        c dw 1h
    17 00000006 0500                        d dw 5h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;(d-a)+(b+b+c)
    22                                          ; ...
    23 00000000 66A1[02000000]                  mov AX,[b]
    24 00000006 668B1D[00000000]                mov BX,[a]
    25 0000000D 668B0D[04000000]                mov CX,[c]
    26 00000014 668B15[06000000]                mov DX,[d]
    27                                  
    28 0000001B 6629DA                          sub DX,BX  ;d-a
    29 0000001E 6689D3                          mov BX,DX  ; BX=d-a
    30 00000021 66BA0200                        mov DX,2h   ;DX=2
    31 00000025 66F7E2                          mul DX      ;DX=b*2
    32 00000028 6650                            push AX
    33 0000002A 6652                            push DX
    34 0000002C 5B                              pop EBX
    35 0000002D 66A1[04000000]                  mov AX,[c]
    36 00000033 66BA0000                        mov DX,0    ;pentru conversia AX â†’ DX:AX (EAX)
    37 00000037 6650                            push AX
    38 00000039 6652                            push DX
    39 0000003B 58                              pop EAX
    40 0000003C 01C3                            add EBX,EAX ; b+b+c
    41 0000003E 6689D8                          mov AX,BX
    42 00000041 66BA0000                        mov DX,0 
    43 00000045 6650                            push AX
    44 00000047 6652                            push DX
    45 00000049 59                              pop ECX
    46                                          
    47 0000004A 01D9                            add ECX,EBX  ;(d-a)+(b+b+c)
    48                                  
    49                                          ; exit(0)
    50 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program

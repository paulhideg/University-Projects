     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 03                          a db 3h
    15 00000001 02                          b db 2h
    16 00000002 01                          c db 1h
    17 00000003 0500                        d dw 5h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          ;(d-b*c+b*2)/a
    23 00000000 A0[01000000]                    mov AL,[b]  ;AL=b
    24 00000005 8A35[02000000]                  mov DH,[c]  ;DH=c
    25 0000000B F6E6                            mul DH      ;AX=AL*DH=b*c
    26 0000000D 6689C3                          mov BX,AX   ;BX=AX=b*c
    27 00000010 B602                            mov DH,2h   ;DH=2
    28 00000012 F6E6                            mul DH      ;AX=AL*DH=b*2
    29 00000014 668B0D[03000000]                mov CX,[d]  ;CX=d
    30 0000001B 6629D9                          sub CX,BX   ;CX=CX-BX=d-b*c
    31 0000001E 6601C1                          add CX,AX   ;CX=CX+AX=(d-b*c)+b*2
    32 00000021 6689C8                          mov AX,CX   ;AX=CX=d-b*c+b*2
    33 00000024 8A0D[00000000]                  mov CL,[a]    ;CL=a
    34 0000002A F6F1                            div CL      ;AL=AX/CL=(d-b*c+b*2)/a
    35                                          
    36                                  
    37                                  
    38                                          ; exit(0)
    39 0000002C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 0000002E FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 
     2                                  global start        
     3                                  extern exit               
     4                                  import exit msvcrt.dll    
     5                                  segment data use32 class=data
     6 00000000 02FF05FD                        S db 2,-1, 5, -3; 02 ff, 05 , -3? 00 00 00
     7                                          l equ $-S
     8 00000004 00<rept>                        D1 times l db 0 ;positive number
     9 00000008 01<rept>                        D2 times l db 1;
    10                                  segment code use32 class=code
    11                                      start:
    12                                          ;exercise 14
    13                                          ;A byte string S is given. 
    14                                          ;Obtain the string D1 which contains all the positive numbers of S 
    15                                          ;and the string D2 which contains all the negative numbers of S.
    16                                      
    17 00000000 B904000000                      mov ecx, l ; we put the length l in ECX in order to make the loop
    18 00000005 BE00000000                      mov esi, 0
    19 0000000A BF00000000                      mov edi, 0
    20 0000000F E31E                            jecxz Sfarsit      
    21                                          Repeta:
    22 00000011 8A86[00000000]                      mov al, [S+esi]         ;we move the "esi-th" index number of the S string
    23 00000017 B300                                mov bl, 0               ;we move 0 in bl in order to see if a number is lower (negative) or higher than 0
    24 00000019 38D8                                cmp al,bl               ;we compare al with bl (it calculates al-bl)
    25 0000001B 7C09                                jl checks               ;if the number is lower than 0 it jumps to line 27, where checks keyword is
    26 0000001D 8886[04000000]                         mov [D1+esi],al      ;else it continues with the following instructions
    27 00000023 46                                     inc esi                ;we move the positive number from al in D1 on the esi position
    28 00000024 7D07                                jge jumpp
    29                                              checks:
    30 00000026 8887[08000000]                         mov [D2+edi],al     ;we move the negative number from al in D2 on the edi position
    31 0000002C 47                                     inc edi
    32                                              jumpp:
    33 0000002D E2E2                            loop Repeta
    34                                          Sfarsit:                    ;end of the program
    35                                          ; exit(0)
    36 0000002F 6A00                            push    dword 0      
    37 00000031 FF15[00000000]                  call    [exit]       

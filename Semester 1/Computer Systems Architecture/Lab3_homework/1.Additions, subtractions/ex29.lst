     1                                  bits 32 
     2                                  global start        
     3                                  extern exit               
     4                                  import exit msvcrt.dll    
     5                                  segment data use32 class=data
     6                                          ;variables:
     7 00000000 03                              a db 3h
     8 00000001 0500                            b dw 5h
     9 00000003 06000000                        c dd 6h
    10 00000007 0800000000000000                d dq 8h
    11                                  
    12                                  segment code use32 class=code
    13                                      start:
    14                                          ;exercise 29:   d+c-b+(a-c)
    15                                          
    16 00000000 8B1D[07000000]                  mov EBX,dword[d]    ;EAX=d
    17 00000006 8B0D[0B000000]                  mov ECX,dword[d+4]  ;EBX=d(part2)
    18 0000000C A1[03000000]                    mov EAX,[c]         ;EBX=c
    19 00000011 BA00000000                      mov EDX,0           ;EAX ->quad --> EDX:EAX = c
    20 00000016 01D3                            add EBX,EDX         ;d+c
    21 00000018 01C1                            add ECX,EAX         ;d+c
    22                                          
    23 0000001A 66A1[01000000]                  mov AX,[b]          ;AX=b
    24 00000020 66BA0000                        mov DX,0            ; pentru conversia AX → DX:AX=b
    25 00000024 6652                            push DX
    26 00000026 6650                            push AX
    27 00000028 58                              pop EAX             ;EAX=b
    28 00000029 BA00000000                      mov EDX,0           ; pentru conversia EAX → EDX:EAX=b
    29                                          
    30 0000002E 29D3                            sub EBX,EDX         ;d+c-b
    31 00000030 29C1                            sub ECX,EAX         ;d+c-b
    32                                          
    33 00000032 A0[00000000]                    mov AL,[a]          ;AL=a
    34 00000037 B400                            mov AH,0            ;AX=a
    35 00000039 66BA0000                        mov DX,0
    36 0000003D 6652                            push DX
    37 0000003F 6650                            push AX
    38 00000041 58                              pop EAX             ;EAX=a
    39 00000042 8B15[03000000]                  mov EDX,[c]         ;EDX=c
    40 00000048 29D0                            sub EAX,EDX         ;a-c
    41 0000004A BA00000000                      mov EDX,0           ; pentru conversia EAX → EDX:EAX=a-c
    42                                          
    43 0000004F 01D3                            add EBX,EDX         ;(d+c-b)+(a-c)
    44 00000051 01C1                            add ECX,EAX         ;(d+c-b)+(a-c)
    45                                          
    46                                          
    47                                          
    48 00000053 6A00                            push    dword 0      
    49 00000055 FF15[00000000]                  call    [exit]       

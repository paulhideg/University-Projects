     1                                  bits 32 
     2                                  global start        
     3                                  extern exit               
     4                                  import exit msvcrt.dll    
     5                                  segment data use32 class=data
     6                                          ;variables:
     7 00000000 03                              a db 3h
     8 00000001 0500                            b dw 5h
     9 00000003 06000000                        c dd 6h
    10 00000007 0800000000000000                x dq 8h
    11                                  
    12                                  segment code use32 class=code
    13                                      start:
    14                                          ;exercise 14: x+(2-a*b)/(a*3)-a+c
    15                                          ; a-byte; b-word; c-doubleword; x-qword
    16 00000000 A0[00000000]                    mov AL,[a]  ;AL=a
    17 00000005 B400                            mov AH,0    ;AX=a
    18 00000007 668B15[01000000]                mov DX,[b]  ;DX=b
    19 0000000E 66F7E2                          mul DX      ;AX=a*b
    20 00000011 66BB0200                        mov BX,2h
    21 00000015 6629C3                          sub BX,AX   ;2-a*b
    22                                          
    23 00000018 A0[00000000]                    mov AL,[a]
    24 0000001D B603                            mov DH,3h
    25 0000001F F6E6                            mul DH      ;AX=a*3
    26 00000021 6689C1                          mov CX,AX   ;CX=a*3
    27 00000024 6689CE                          mov SI,CX   ;SI=a*3
    28                                          
    29 00000027 6689D8                          mov AX,BX   ;AX=2-a*b
    30 0000002A 66BA0000                        mov DX,0    ;DX:AX=2-a*b
    31 0000002E 66F7F6                          div SI      ;AX=(2-a*b)/(a*3)
    32 00000031 6689C3                          mov BX,AX   ;BX=(2-a*b)/(a*3)
    33                                          
    34 00000034 A0[00000000]                    mov AL,[a]
    35 00000039 B400                            mov AH,0    ;AX=a
    36 0000003B 6629C3                          sub BX,AX   ;[(2-a*b)/(a*3)]-a
    37                                          
    38 0000003E 6689D8                          mov AX,BX   ;AX=[(2-a*b)/(a*3)]-a
    39 00000041 66BA0000                        mov DX,0    
    40 00000045 6652                            push DX
    41 00000047 6650                            push AX
    42 00000049 58                              pop EAX     ;EAX=[(2-a*b)/(a*3)]-a
    43                                          
    44 0000004A 8B1D[03000000]                  mov EBX,[c]
    45 00000050 01D8                            add EAX,EBX ;[(2-a*b)/(a*3)-a]+c
    46 00000052 BA00000000                      mov EDX,0   ;EDX:EAX=(2-a*b)/(a*3)-a+c
    47                                          
    48 00000057 8B1D[07000000]                  mov EBX,dword[x]
    49 0000005D 8B0D[0B000000]                  mov ECX,dword[x+4]  ;EBX:ECX=x
    50                                          
    51 00000063 01D3                            add EBX,EDX
    52 00000065 11C1                            adc ECX,EAX     ;EBX:ECX=x+[(2-a*b)/(a*3)-a+c]
    53                                          
    54                                          
    55                                          
    56 00000067 6A00                            push    dword 0      
    57 00000069 FF15[00000000]                  call    [exit]       
